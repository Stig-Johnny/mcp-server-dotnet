name: Deploy to Environments

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
          - both

env:
  REGISTRY: ghcr.io
  # Use commit SHA for deployment tracking
  COMMIT_SHA: ${{ github.sha }}

jobs:
  # Deploy to Staging Environment (GitOps - First Stage)
  deploy-staging:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging' || github.event.inputs.environment == 'both'
    environment: staging
    outputs:
      deployment-status: ${{ steps.deploy.outputs.status }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Deploy to Staging
      id: deploy
      run: |
        echo "Triggering staging deployment via GitOps..."
        echo "This will be handled by ArgoCD Image Updater watching the main branch"
        echo "Staging applications will sync automatically when new images are pushed"
        echo "status=success" >> $GITHUB_OUTPUT
        
        # In a real environment, you would configure kubectl to connect to your cluster
        # and trigger ArgoCD sync or wait for automatic sync:
        # kubectl patch app mcp-server-dotnet-staging -n argocd --type merge -p='{"operation":{"sync":{}}}'
        # kubectl patch app mcp-gateway-staging -n argocd --type merge -p='{"operation":{"sync":{}}}'

    - name: Verify Staging Deployment
      run: |
        echo "Staging deployment verification would happen here"
        echo "In a real environment, this would check:"
        echo "- ArgoCD application sync status"
        echo "- Pod readiness in mcp-server-staging and mcp-gateway-staging namespaces"
        echo "- Health checks for deployed services"
        echo "- Integration tests for critical functionality"
        
        # Example commands for real environment:
        # kubectl wait --for=condition=Synced app/mcp-server-dotnet-staging -n argocd --timeout=300s
        # kubectl wait --for=condition=Ready pod -l app.kubernetes.io/name=mcp-server -n mcp-server-staging --timeout=300s

  # Deploy to Production Environment (GitOps - Second Stage after Staging Success)
  deploy-production:
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: |
      always() && (
        (github.ref == 'refs/heads/main' && needs.deploy-staging.outputs.deployment-status == 'success') ||
        github.event.inputs.environment == 'production' ||
        github.event.inputs.environment == 'both'
      )
    environment: production
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Determine deployment trigger
      id: trigger
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "trigger=gitops-promotion" >> $GITHUB_OUTPUT
          echo "GitOps promotion from successful staging deployment (SHA: ${{ env.COMMIT_SHA }})"
        else
          echo "trigger=manual" >> $GITHUB_OUTPUT
          echo "Manual deployment trigger (SHA: ${{ env.COMMIT_SHA }})"
        fi

    - name: Deploy to Production
      run: |
        echo "Triggering production deployment via GitOps..."
        echo "Deployment trigger: ${{ steps.trigger.outputs.trigger }}"
        echo "Commit SHA: ${{ env.COMMIT_SHA }}"
        echo "This will be handled by ArgoCD Image Updater watching the main branch"
        echo "Production applications will sync automatically when:"
        echo "- New images are pushed with main branch tags or SHA tags"
        echo "- Manual sync is triggered after staging validation"
        
        # In a real environment, you would:
        # For GitOps promotion from staging, trigger manual sync with specific SHA:
        # if [[ "${{ steps.trigger.outputs.trigger }}" == "gitops-promotion" ]]; then
        #   kubectl patch app mcp-server-dotnet -n argocd --type merge -p='{"operation":{"sync":{}}}'
        #   kubectl patch app mcp-gateway -n argocd --type merge -p='{"operation":{"sync":{}}}'
        # fi

    - name: Verify Production Deployment
      run: |
        echo "Production deployment verification would happen here"
        echo "In a real environment, this would check:"
        echo "- ArgoCD application sync status"
        echo "- Pod readiness in mcp-server and mcp-gateway namespaces"
        echo "- Health checks for deployed services"
        echo "- Smoke tests for critical functionality"
        echo "- Performance validation"
        
        # Example commands for real environment:
        # kubectl wait --for=condition=Synced app/mcp-server-dotnet -n argocd --timeout=300s
        # kubectl wait --for=condition=Ready pod -l app.kubernetes.io/name=mcp-server -n mcp-server --timeout=300s

  # Notification job (runs after both deployments)
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Deployment Summary
      run: |
        echo "=== GitOps Deployment Summary ==="
        echo "Staging Status: ${{ needs.deploy-staging.result || 'skipped' }}"
        echo "Production Status: ${{ needs.deploy-production.result || 'skipped' }}"
        echo "Branch/Ref: ${{ github.ref }}"
        echo "Commit SHA: ${{ env.COMMIT_SHA }}"
        echo "========================="
        
        if [[ "${{ needs.deploy-staging.result }}" == "success" && "${{ needs.deploy-production.result }}" == "success" ]]; then
          echo "✅ GitOps deployment completed successfully"
          echo "✅ Staging → Production promotion completed"
        elif [[ "${{ needs.deploy-staging.result }}" == "failure" || "${{ needs.deploy-production.result }}" == "failure" ]]; then
          echo "❌ One or more deployments failed"
          exit 1
        else
          echo "ℹ️  Partial deployment completed"
        fi